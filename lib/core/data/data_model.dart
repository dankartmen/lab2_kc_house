/// {@template data_model}
/// Базовый абстрактный класс для всех моделей данных в системе.
/// Определяет общий интерфейс для работы с различными типами данных.
/// {@endtemplate}
abstract class DataModel {
  /// {@macro data_model}
  const DataModel();

  /// Преобразует объект в формат JSON.
  /// 
  /// Возвращает:
  /// - [Map<String, dynamic>] содержащий все поля объекта в виде ключ-значение.
  Map<String, dynamic> toJson();

  /// Получает отображаемое имя объекта.
  /// 
  /// Используется для отображения в UI вместо технического идентификатора.
  /// Возвращает:
  /// - [String] человеко-читаемое название объекта.
  String getDisplayName();

  /// Получает список числовых полей модели.
  /// 
  /// Эти поля используются для статистического анализа и построения графиков.
  /// Возвращает:
  /// - [List<String>] список имен числовых полей.
  List<String> getNumericFields();

  /// Получает числовое значение указанного поля.
  /// 
  /// Принимает:
  /// - [field] - имя поля, значение которого нужно получить.
  /// 
  /// Возвращает:
  /// - [double?] числовое значение поля или null если поле не существует 
  ///   или не является числовым.
  double? getNumericValue(String field);
}

/// {@template data_source}
/// Абстрактный класс для источников данных.
/// Определяет интерфейс для загрузки данных из различных источников.
/// {@endtemplate}
abstract class DataSource<T extends DataModel> {
  /// {@macro data_source}
  const DataSource();

  /// Загружает данные из источника.
  /// 
  /// Возвращает:
  /// - [Future<List<T>>] список загруженных объектов данных.
  /// 
  /// Выбрасывает исключение при ошибках загрузки данных.
  Future<List<T>> loadData();

  /// Получает человеко-читаемое имя типа данных.
  /// 
  /// Используется для отображения в пользовательском интерфейсе.
  /// Возвращает:
  /// - [String] название типа данных.
  String get dataTypeName;
}